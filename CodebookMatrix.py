import torch

class coderMatrix(torch.nn.Module):
    def __init__(self, device):
        """
        Initializes the encoder matrices.

        Args:
            device: The device to run the encoder on.

        Returns:
            Specific encoder matrix and decoder matrix
        """
        super(coderMatrix, self).__init__()

        # Define the device
        self.device = device

    def forward(self, encoded, origin):
        # Define the 7x4 matrix
        if encoded == 7 and origin == 4:
            encode_matrix = torch.tensor([[1, 1, 0, 1],
                                   [1, 0, 1, 1],
                                   [1, 0, 0, 0],
                                   [0, 1, 1, 1],
                                   [0, 1, 0, 0],
                                   [0, 0, 1, 0],
                                   [0, 0, 0, 1]], dtype=torch.float, device=self.device)

            decode_matrix = torch.tensor([[0, 0, 1, 0, 0, 0, 0],
                                [0, 0, 0, 0, 1, 0, 0],
                                [0, 0, 0, 0, 0, 1, 0],
                                [0, 0, 0, 0, 0, 0, 1]],device=self.device, dtype=torch.float)

        # Define the 10x5 matrix
        elif encoded == 10 and origin == 5:
            # encode_matrix = torch.tensor([[1, 0, 0, 0, 0],
            #                        [0, 1, 0, 0, 0],
            #                        [0, 0, 1, 0, 0],
            #                        [0, 0, 0, 1, 0],
            #                        [0, 0, 0, 0, 1],
            #                        [1, 0, 0, 0, 1],
            #                        [1, 1, 0, 0, 0],
            #                        [0, 1, 1, 0, 0],
            #                        [0, 0, 1, 1, 0],
            #                        [0, 0, 0, 1, 1]], dtype=torch.float, device=self.device)

            encode_matrix = torch.tensor([[1, 0, 0, 0, 0],
                                          [0, 1, 0, 0, 0],
                                          [0, 0, 1, 0, 0],
                                          [0, 0, 0, 1, 0],
                                          [0, 0, 0, 0, 1],
                                          [1, 1, 1, 1, 0],
                                          [1, 1, 1, 0, 1],
                                          [1, 1, 0, 1, 1],
                                          [1, 0, 1, 1, 1],
                                          [0, 1, 1, 1, 1]], dtype=torch.float, device=self.device)

            decode_matrix = torch.tensor([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                              [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                              [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]], device=self.device, dtype=torch.float)

        # Define the 16x5 matrix
        elif encoded == 16 and origin == 5:
            encode_matrix = torch.tensor([[1, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0],
                                   [0, 0, 1, 0, 0],
                                   [0, 0, 0, 1, 0],
                                   [0, 0, 0, 0, 1],
                                   [1, 1, 1, 1, 1],
                                   [1, 1, 0, 1, 1],
                                   [1, 0, 1, 1, 0],
                                   [1, 0, 0, 1, 1],
                                   [0, 1, 1, 0, 1],
                                   [1, 1, 1, 0, 0],
                                   [0, 1, 0, 1, 1],
                                   [1, 0, 1, 0, 1],
                                   [0, 1, 0, 1, 0],
                                   [1, 0, 0, 1, 1],
                                   [0, 1, 1, 0, 0]], dtype=torch.float, device=self.device)

            decode_matrix = torch.tensor([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], device=self.device, dtype=torch.float)

        # Define the 20x7 matrix
        elif encoded == 20 and origin == 7:
            encode_matrix = torch.tensor([[1, 0, 0, 0, 0, 0, 0],
                               [0, 1, 0, 0, 0, 0, 0],
                               [0, 0, 1, 0, 0, 0, 0],
                               [0, 0, 0, 1, 0, 0, 0],
                               [0, 0, 0, 0, 1, 0, 0],
                               [0, 0, 0, 0, 0, 1, 0],
                               [0, 0, 0, 0, 0, 0, 1],
                               [0, 0, 0, 0, 0, 1, 0],
                               [0, 1, 1, 0, 1, 0, 1],
                               [1, 0, 1, 1, 1, 0, 0],
                               [1, 0, 1, 1, 0, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0],
                               [0, 1, 1, 0, 0, 1, 1],
                               [1, 1, 1, 1, 1, 1, 0],
                               [0, 1, 0, 0, 0, 1, 1],
                               [0, 0, 0, 1, 0, 1, 1],
                               [1, 1, 0, 1, 1, 0, 0],
                               [0, 0, 1, 1, 1, 0, 1],
                               [1, 1, 0, 0, 0, 1, 1],
                               [1, 0, 0, 0, 0, 1, 0]], dtype=torch.float, device=self.device)

            decode_matrix = torch.tensor([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], device=self.device, dtype=torch.float)

        # Define the 26x10 matrix
        elif encoded == 26 and origin == 10:
            encode_matrix = torch.tensor([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                                   [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                                   [1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
                                   [1, 0, 0, 1, 0, 1, 1, 0, 1, 0],
                                   [1, 0, 1, 0, 0, 0, 1, 0, 0, 1],
                                   [0, 1, 1, 1, 0, 1, 0, 0, 1, 1],
                                   [1, 0, 0, 1, 0, 1, 1, 1, 1, 1],
                                   [1, 1, 1, 1, 0, 1, 0, 0, 0, 1],
                                   [1, 1, 1, 1, 1, 1, 0, 1, 0, 0],
                                   [1, 0, 0, 0, 1, 1, 1, 0, 1, 0],
                                   [1, 0, 0, 1, 0, 1, 0, 1, 0, 0],
                                   [1, 1, 1, 0, 0, 0, 0, 1, 0, 1],
                                   [1, 1, 0, 0, 0, 1, 0, 1, 0, 0],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 0, 1],
                                   [0, 1, 1, 1, 1, 0, 1, 1, 1, 1],
                                   [1, 0, 1, 0, 0, 0, 0, 0, 1, 1],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 1, 0, 1]], dtype=torch.float, device=self.device)

            decode_matrix = torch.tensor([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], device=self.device, dtype=torch.float)

        # Define the 30x12 matrix
        elif encoded == 30 and origin == 12:
            encode_matrix = torch.tensor([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                                   [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0],
                                   [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0],
                                   [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1],
                                   [0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0],
                                   [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1],
                                   [1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0],
                                   [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0],
                                   [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],
                                   [1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1],
                                   [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0],
                                   [1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0],
                                   [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0],
                                   [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1],
                                   [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1],
                                   [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0],
                                   [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0],
                                   [0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0]], dtype=torch.float, device=self.device)

            decode_matrix = torch.tensor([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], device=self.device, dtype=torch.float)

        # Define the 34x12 matrix
        elif encoded == 34 and origin == 12:
            encode_matrix = torch.tensor([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                                   [0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0],
                                   [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0],
                                   [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0],
                                   [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0],
                                   [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0],
                                   [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0],
                                   [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0],
                                   [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1],
                                   [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0],
                                   [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1],
                                   [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1],
                                   [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0],
                                   [1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1],
                                   [1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1],
                                   [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1],
                                   [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0],
                                   [0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0],
                                   [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1],
                                   [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1],
                                   [1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1],
                                   [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1]], dtype=torch.float, device=self.device)

            decode_matrix = torch.tensor([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], device=self.device, dtype=torch.float)

        return encode_matrix, decode_matrix