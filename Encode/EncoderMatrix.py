import torch


# Hamming(7,4) Encoder Matrix:
def Hamming74_matrix(device):
    matrix = torch.tensor([[1, 1, 0, 1],
                           [1, 0, 1, 1],
                           [1, 0, 0, 0],
                           [0, 1, 1, 1],
                           [0, 1, 0, 0],
                           [0, 0, 1, 0],
                           [0, 0, 0, 1]], dtype=torch.float, device=device)

    return matrix


# (10,5)Parity Check Code Encoder Matrix:
def Parity10_5_matrix(device):
    matrix = torch.tensor([[1, 0, 0, 0, 0],
                           [0, 1, 0, 0, 0],
                           [0, 0, 1, 0, 0],
                           [0, 0, 0, 1, 0],
                           [0, 0, 0, 0, 1],
                           [1, 0, 0, 0, 1],
                           [1, 1, 0, 0, 0],
                           [0, 1, 1, 0, 0],
                           [0, 0, 1, 1, 0],
                           [0, 0, 0, 1, 1]], dtype=torch.float, device=device)

    return matrix


# (16,5)Parity Check Code Encoder Matrix:
def Parity16_5_matrix(device):
    matrix = torch.tensor([[1, 0, 0, 0, 0],
                           [0, 1, 0, 0, 0],
                           [0, 0, 1, 0, 0],
                           [0, 0, 0, 1, 0],
                           [0, 0, 0, 0, 1],
                           [1, 1, 1, 1, 1],
                           [1, 1, 0, 1, 1],
                           [1, 0, 1, 1, 0],
                           [1, 0, 0, 1, 1],
                           [0, 1, 1, 0, 1],
                           [1, 1, 1, 0, 0],
                           [0, 1, 0, 1, 1],
                           [1, 0, 1, 0, 1],
                           [0, 1, 0, 1, 0],
                           [1, 0, 0, 1, 1],
                           [0, 1, 1, 0, 0]], dtype=torch.float, device=device)

    return matrix


# (20,7)Parity Check Code Encoder Matrix:
def Parity20_7_matrix(device):
    matrix = torch.tensor([[1, 0, 0, 0, 0, 0, 0],
                           [0, 1, 0, 0, 0, 0, 0],
                           [0, 0, 1, 0, 0, 0, 0],
                           [0, 0, 0, 1, 0, 0, 0],
                           [0, 0, 0, 0, 1, 0, 0],
                           [0, 0, 0, 0, 0, 1, 0],
                           [0, 0, 0, 0, 0, 0, 1],
                           [0, 0, 0, 0, 0, 1, 0],
                           [0, 1, 1, 0, 1, 0, 1],
                           [1, 0, 1, 1, 1, 0, 0],
                           [1, 0, 1, 1, 0, 1, 1],
                           [0, 0, 0, 0, 0, 0, 0],
                           [0, 1, 1, 0, 0, 1, 1],
                           [1, 1, 1, 1, 1, 1, 0],
                           [0, 1, 0, 0, 0, 1, 1],
                           [0, 0, 0, 1, 0, 1, 1],
                           [1, 1, 0, 1, 1, 0, 0],
                           [0, 0, 1, 1, 1, 0, 1],
                           [1, 1, 0, 0, 0, 1, 1],
                           [1, 0, 0, 0, 0, 1, 0]], dtype=torch.float, device=device)

    return matrix


# (26,10)Parity Check Code Encoder Matrix:
def Parity26_10_matrix(device):
    matrix = torch.tensor([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                           [0, 0, 1, 0, 1, 0, 0, 0, 1, 1],
                           [1, 0, 0, 1, 0, 1, 1, 0, 1, 0],
                           [1, 0, 1, 0, 0, 0, 1, 0, 0, 1],
                           [0, 1, 1, 1, 0, 1, 0, 0, 1, 1],
                           [1, 0, 0, 1, 0, 1, 1, 1, 1, 1],
                           [1, 1, 1, 1, 0, 1, 0, 0, 0, 1],
                           [1, 1, 1, 1, 1, 1, 0, 1, 0, 0],
                           [1, 0, 0, 0, 1, 1, 1, 0, 1, 0],
                           [1, 0, 0, 1, 0, 1, 0, 1, 0, 0],
                           [1, 1, 1, 0, 0, 0, 0, 1, 0, 1],
                           [1, 1, 0, 0, 0, 1, 0, 1, 0, 0],
                           [0, 1, 1, 1, 1, 1, 1, 1, 0, 1],
                           [0, 1, 1, 1, 1, 0, 1, 1, 1, 1],
                           [1, 0, 1, 0, 0, 0, 0, 0, 1, 1],
                           [0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                           [0, 0, 1, 0, 0, 0, 0, 1, 0, 1]], dtype=torch.float, device=device)

    return matrix


# (30,12)Parity Check Code Encoder Matrix:
def Parity30_12_matrix(device):
    matrix = torch.tensor([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                           [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0],
                           [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0],
                           [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1],
                           [0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0],
                           [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1],
                           [1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0],
                           [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0],
                           [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],
                           [1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1],
                           [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0],
                           [1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0],
                           [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0],
                           [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1],
                           [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1],
                           [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0],
                           [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0],
                           [0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0],
                           [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0]], dtype=torch.float, device=device)

    return matrix


# (34,12)Parity Check Code Encoder Matrix:
def Parity34_12_matrix(device):
    matrix = torch.tensor([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                           [0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0],
                           [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0],
                           [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0],
                           [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0],
                           [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0],
                           [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0],
                           [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0],
                           [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0],
                           [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1],
                           [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0],
                           [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1],
                           [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1],
                           [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0],
                           [1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1],
                           [1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1],
                           [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1],
                           [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0],
                           [0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0],
                           [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1],
                           [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1],
                           [1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1],
                           [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1]], dtype=torch.float, device=device)

    return matrix
